<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="460px" preserveAspectRatio="none" style="width:2616px;height:460px;background:#FFFFFF;" version="1.1" viewBox="0 0 2616 460" width="2616px" zoomAndPan="magnify"><defs/><g><!--MD5=[7c76d2c3a8a2b6b7f38b9d3310256c36]
cluster Commands--><g id="cluster_Commands"><rect fill="none" height="355.42" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:1.0;" width="216" x="7" y="7"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="81" x="74.5" y="22.5352">Commands</text></g><!--MD5=[60d465d73159e3034430b60cbfc0a75e]
cluster Disk--><g id="cluster_Disk"><path d="M2511,256.18 C2511,246.18 2555,246.18 2555,246.18 C2555,246.18 2599,246.18 2599,256.18 L2599,338.67 C2599,348.67 2555,348.67 2555,348.67 C2555,348.67 2511,348.67 2511,338.67 L2511,256.18 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><path d="M2511,256.18 C2511,266.18 2555,266.18 2555,266.18 C2555,266.18 2599,266.18 2599,256.18 " fill="none" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="33" x="2538.5" y="281.7152">Disk</text></g><!--MD5=[9b5f3073f4d9b34ba7a64d080faa4eec]
class ls--><g id="elem_ls"><rect codeLine="10" fill="#F1F1F1" height="48" id="ls" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="43" x="30.5" y="50"/><ellipse cx="45.5" cy="66" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M41.1372,60.1069 L43.5859,60.1069 L43.5859,64.8301 L46.6489,64.8301 L46.6489,60.1069 L49.0977,60.1069 L49.0977,72.5 L46.6489,72.5 L46.6489,66.9883 L43.5859,66.9883 L43.5859,72.5 L41.1372,72.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="11" x="59.5" y="71.291">ls</text><line style="stroke:#181818;stroke-width:0.5;" x1="31.5" x2="72.5" y1="82" y2="82"/><line style="stroke:#181818;stroke-width:0.5;" x1="31.5" x2="72.5" y1="90" y2="90"/></g><!--MD5=[dde36586c4dc8bfe9456b5a0febf9990]
class mkdir--><g id="elem_mkdir"><rect codeLine="11" fill="#F1F1F1" height="48" id="mkdir" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="72" x="108" y="50"/><ellipse cx="123" cy="66" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M118.6372,60.1069 L121.0859,60.1069 L121.0859,64.8301 L124.1489,64.8301 L124.1489,60.1069 L126.5977,60.1069 L126.5977,72.5 L124.1489,72.5 L124.1489,66.9883 L121.0859,66.9883 L121.0859,72.5 L118.6372,72.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="137" y="71.291">mkdir</text><line style="stroke:#181818;stroke-width:0.5;" x1="109" x2="179" y1="82" y2="82"/><line style="stroke:#181818;stroke-width:0.5;" x1="109" x2="179" y1="90" y2="90"/></g><!--MD5=[76e459d46047ab2fc8454f11fa061786]
class cp--><g id="elem_cp"><rect codeLine="12" fill="#F1F1F1" height="48" id="cp" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="48" x="31" y="290.42"/><ellipse cx="46" cy="306.42" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M41.6372,300.5269 L44.0859,300.5269 L44.0859,305.2501 L47.1489,305.2501 L47.1489,300.5269 L49.5977,300.5269 L49.5977,312.92 L47.1489,312.92 L47.1489,307.4083 L44.0859,307.4083 L44.0859,312.92 L41.6372,312.92 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="16" x="60" y="311.711">cp</text><line style="stroke:#181818;stroke-width:0.5;" x1="32" x2="78" y1="322.42" y2="322.42"/><line style="stroke:#181818;stroke-width:0.5;" x1="32" x2="78" y1="330.42" y2="330.42"/></g><!--MD5=[c638773fe335267ba69c2a0d88eef0e2]
class cat--><g id="elem_cat"><rect codeLine="13" fill="#F1F1F1" height="48" id="cat" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="52" x="114" y="290.42"/><ellipse cx="129" cy="306.42" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M124.6372,300.5269 L127.0859,300.5269 L127.0859,305.2501 L130.1489,305.2501 L130.1489,300.5269 L132.5977,300.5269 L132.5977,312.92 L130.1489,312.92 L130.1489,307.4083 L127.0859,307.4083 L127.0859,312.92 L124.6372,312.92 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="20" x="143" y="311.711">cat</text><line style="stroke:#181818;stroke-width:0.5;" x1="115" x2="165" y1="322.42" y2="322.42"/><line style="stroke:#181818;stroke-width:0.5;" x1="115" x2="165" y1="330.42" y2="330.42"/></g><g id="elem_image"><rect fill="#F1F1F1" height="36.4883" style="stroke:#181818;stroke-width:0.5;" width="56" x="2527" y="296.18"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="2534" y="311.7152">image</text><line style="stroke:#181818;stroke-width:0.5;" x1="2528" x2="2582" y1="316.6683" y2="316.6683"/></g><!--MD5=[8d919f42174a8592853f0e252dac1126]
class S--><g id="elem_S"><rect codeLine="2" fill="#F1F1F1" height="113.9531" id="S" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="212" x="247" y="257.45"/><ellipse cx="332.25" cy="273.45" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M327.8872,267.5569 L330.3359,267.5569 L330.3359,272.2801 L333.3989,272.2801 L333.3989,267.5569 L335.8477,267.5569 L335.8477,279.95 L333.3989,279.95 L333.3989,274.4383 L330.3359,274.4383 L330.3359,279.95 L327.8872,279.95 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="352.75" y="278.741">Shell</text><line style="stroke:#181818;stroke-width:0.5;" x1="248" x2="458" y1="289.45" y2="289.45"/><line style="stroke:#181818;stroke-width:0.5;" x1="248" x2="458" y1="297.45" y2="297.45"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="253" y="314.9852">psh_cd(char **args): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="253" y="331.4734">psh_help(char **args): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="253" y="347.9617">psh_exit(char **args): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="253" y="364.45">psh_execute(char **args): int</text></g><!--MD5=[fab8a4e37785c79454be61dda971f7d1]
class K--><g id="elem_K"><rect codeLine="16" fill="#F1F1F1" height="245.8594" id="K" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="754" x="494" y="191.49"/><ellipse cx="844.75" cy="207.49" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M840.3872,201.5969 L842.8359,201.5969 L842.8359,206.3201 L845.8989,206.3201 L845.8989,201.5969 L848.3477,201.5969 L848.3477,213.99 L845.8989,213.99 L845.8989,208.4783 L842.8359,208.4783 L842.8359,213.99 L840.3872,213.99 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="44" x="865.25" y="212.781">Kernel</text><line style="stroke:#181818;stroke-width:0.5;" x1="495" x2="1247" y1="223.49" y2="223.49"/><line style="stroke:#181818;stroke-width:0.5;" x1="495" x2="1247" y1="231.49" y2="231.49"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="487" x="500" y="249.0252">int sys_open(const char *pathname, bool should_create); // High prio !!</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="500" y="265.5134">int sys_close(int fd); // Med prio !</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="419" x="500" y="282.0017">ssize_t sys_read(int fd, char *buf, size_t count); // High prio !!</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="500" y="298.49">ssize_t sys_write(int fd, const char *buf, size_t count); // High prio !!</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="742" x="500" y="314.9783">off_t sys_lseek(int fd, off_t offset, int whence); // TODO: Whence -&gt; SET END simple_lseek(fd, offset, whence)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="538" x="500" y="331.4666">int sys_stat(const char *restrict pathname, struct sys_stat *statbuf); // Med prio</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="374" x="500" y="347.9548">int sys_fstat(int fd, struct sys_stat *statbuf); // Low prio</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="455" x="500" y="364.4431">int sys_mkdir(const char *pathname, mode_t mode); // High prio !!</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="500" y="380.9314">int sys_rmdir(const char *pathname); // High prio !!</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="479" x="500" y="397.4197">bool sys_truncate(const char *pathname, size_t new_size); // Low prio</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="437" x="500" y="413.908">size_t sys_rename(char *oldpath, char *newpath); // High prio !!</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="548" x="500" y="430.3962">bool sys_readdir(const char *pathname, struct sys_dirent *dirent); // High prio !!</text></g><!--MD5=[cde783aea64eea86b5ef94cdd7aac891]
class FS--><g id="elem_FS"><rect codeLine="31" fill="#F1F1F1" height="278.8359" id="FS" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="657" x="1282.5" y="175"/><ellipse cx="1568.75" cy="191" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1564.3872,185.1069 L1566.8359,185.1069 L1566.8359,189.8301 L1569.8989,189.8301 L1569.8989,185.1069 L1572.3477,185.1069 L1572.3477,197.5 L1569.8989,197.5 L1569.8989,191.9883 L1566.8359,191.9883 L1566.8359,197.5 L1564.3872,197.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="1589.25" y="196.291">File System</text><line style="stroke:#181818;stroke-width:0.5;" x1="1283.5" x2="1938.5" y1="207" y2="207"/><line style="stroke:#181818;stroke-width:0.5;" x1="1283.5" x2="1938.5" y1="215" y2="215"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="1288.5" y="232.5352">fs_create_file(FileSystem *fs, char *path): inode_t</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="303" x="1288.5" y="249.0234">fs_mkdir(FileSystem *fs, char *path): inode_t</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="1288.5" y="265.5117">fs_rmdir(FileSystem *fs, inode_t dir): bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290" x="1288.5" y="282">fs_unlink(FileSystem *fs, inode_t file): bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="642" x="1288.5" y="298.4883">fs_read(FileSystem *fs, size_t inode_number, uint8_t *data, size_t length, size_t offset): ssize_t</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="645" x="1288.5" y="314.9766">fs_write(FileSystem *fs, size_t inode_number, uint8_t *data, size_t length, size_t offset): ssize_t</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="337" x="1288.5" y="331.4648">fs_rename(char* oldpath, char* newpath): ssize_t</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="410" x="1288.5" y="347.9531">fs_truncate(FileSystem *fs, inode_t file, size_t newsize): bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="1288.5" y="364.4414">fs_readdir(FileSystem *fs, inode_t dir): inode_t*</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="486" x="1288.5" y="380.9297">fs_getpath(FileSystem *fs, inode_t inode): char[FS_MAX_PATH_LENGTH]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="349" x="1288.5" y="397.418">fs_getinfo(FileSystem *fs, inode_t inode): InodeInfo</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="315" x="1288.5" y="413.9063">fs_format(Disk *disk, bool quick_format): bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="1288.5" y="430.3945">fs_mount(FileSystem *fs, Disk *disk): bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="1288.5" y="446.8828">fs_unmount(FileSystem *fs): bool</text></g><!--MD5=[092fe8fdb86425158d2b6b479a95312c]
class DE--><g id="elem_DE"><rect codeLine="48" fill="#F1F1F1" height="163.418" id="DE" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="517" x="1974.5" y="232.71"/><ellipse cx="2181.25" cy="248.71" fill="#ADD8E6" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2176.8872,242.8169 L2179.3359,242.8169 L2179.3359,247.5401 L2182.3989,247.5401 L2182.3989,242.8169 L2184.8477,242.8169 L2184.8477,255.21 L2182.3989,255.21 L2182.3989,249.6983 L2179.3359,249.6983 L2179.3359,255.21 L2176.8872,255.21 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="2201.75" y="254.001">Disk Emulator</text><line style="stroke:#181818;stroke-width:0.5;" x1="1975.5" x2="2490.5" y1="264.71" y2="264.71"/><line style="stroke:#181818;stroke-width:0.5;" x1="1975.5" x2="2490.5" y1="272.71" y2="272.71"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="326" x="1980.5" y="290.2452">disk_create(const char *path, size_t sectors): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="1980.5" y="306.7334">disk_open(Disk *disk, const char *path): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="1980.5" y="323.2217">disk_close(Disk *disk): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="502" x="1980.5" y="339.71">disk_read_sector(Disk *disk, uint8_t data[SECTOR_SIZE], size_t sector): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="505" x="1980.5" y="356.1983">disk_write_sector(Disk *disk, uint8_t data[SECTOR_SIZE], size_t sector): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="479" x="1980.5" y="372.6866">disk_read_raw(Disk *disk, uint8_t *data, size_t count, size_t offset): int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="1980.5" y="389.1748">disk_write_raw(Disk *disk, uint8_t *data, size_t count, size_t offset): int</text></g><!--MD5=[9df2007d94cf82b573fab31f05db4b2a]
reverse link Commands to S--><g id="link_Commands_S"><path codeLine="62" d="M223.1571,89.0975 C223.2489,89.2562 223.3414,89.416 223.4346,89.5771 C223.621,89.8991 223.81,90.2259 224.0018,90.5572 C224.7687,91.8824 225.578,93.2809 226.4272,94.7483 C233.2206,106.4872 242.5638,122.6306 253.1225,140.8737 C274.24,177.36 300.22,222.245 320.39,257.09 " fill="none" id="Commands-backto-S" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="223.1571,89.0975,224.2028,98.8906,225.6614,93.4251,231.127,94.8837,223.1571,89.0975" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="17" x="254" y="141.5684">ref</text></g><!--MD5=[33f21e1c2c2b6ba8663e009242443105]
link S to K--><g id="link_S_K"><path codeLine="64" d="M459.48,314.42 C468.73,314.42 477.99,314.42 487.24,314.42 " fill="none" id="S-to-K" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="492.13,314.42,483.13,310.42,487.13,314.42,483.13,318.42,492.13,314.42" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[632d056e784e8a73587ad3abf53e342b]
link Commands to K--><g id="link_Commands_K"><path codeLine="65" d="M223.1022,77.9503 C223.2522,78.0048 223.4041,78.0601 223.5581,78.116 C228.4843,79.9062 235.4311,82.4309 244.1197,85.5886 C261.4969,91.9041 285.8413,100.7519 314.9225,111.3212 C373.085,132.46 450.195,160.485 528.41,188.91 " fill="none" id="Commands-to-K" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="533.03,190.59,525.9455,183.7482,528.3327,188.8767,523.2042,191.2639,533.03,190.59" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[73f9cac6f6b04353dcb49a4cce5c5a9f]
link K to FS--><g id="link_K_FS"><path codeLine="67" d="M1248.23,314.42 C1257.44,314.42 1266.65,314.42 1275.86,314.42 " fill="none" id="K-to-FS" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1280.72,314.42,1271.72,310.42,1275.72,314.42,1271.72,318.42,1280.72,314.42" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6615318c79663c925d369f9049c58993]
link FS to DE--><g id="link_FS_DE"><path codeLine="69" d="M1939.92,314.42 C1949.22,314.42 1958.52,314.42 1967.82,314.42 " fill="none" id="FS-to-DE" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1972.75,314.42,1963.75,310.42,1967.75,314.42,1963.75,318.42,1972.75,314.42" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a966676de9710d4a4553f0ea24aa5ad4]
link DE to image--><g id="link_DE_image"><path codeLine="71" d="M2491.79,314.42 C2501.38,314.42 2510.97,314.42 2520.55,314.42 " fill="none" id="DE-to-image" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2525.34,314.42,2516.34,310.42,2520.34,314.42,2516.34,318.42,2525.34,314.42" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ef18b9d87226ea14abd11a22da114ec2]
@startuml

class "Shell" as S << (H, lightblue) >> {
 psh_cd(char **args): int
 psh_help(char **args): int
 psh_exit(char **args): int
 psh_execute(char **args): int
}

package "Commands" <<rectangle>> {
  class "ls" as ls << (H, lightblue) >>
  class "mkdir" as mkdir << (H, lightblue) >>
  class "cp" as cp << (H, lightblue) >>
  class "cat" as cat << (H, lightblue) >>
}

class "Kernel" as K << (H, lightblue) >> {
int sys_open(const char *pathname, bool should_create); // High prio !!
int sys_close(int fd); // Med prio !
ssize_t sys_read(int fd, char *buf, size_t count); // High prio !!
ssize_t sys_write(int fd, const char *buf, size_t count); // High prio !!
off_t sys_lseek(int fd, off_t offset, int whence); // TODO: Whence -> SET END simple_lseek(fd, offset, whence)
int sys_stat(const char *restrict pathname, struct sys_stat *statbuf); // Med prio
int sys_fstat(int fd, struct sys_stat *statbuf); // Low prio
int sys_mkdir(const char *pathname, mode_t mode); // High prio !!
int sys_rmdir(const char *pathname); // High prio !!
bool sys_truncate(const char *pathname, size_t new_size); // Low prio
size_t sys_rename(char *oldpath, char *newpath); // High prio !!
bool sys_readdir(const char *pathname, struct sys_dirent *dirent); // High prio !!
}

class "File System" as FS << (H, lightblue) >> {
 fs_create_file(FileSystem *fs, char *path): inode_t
 fs_mkdir(FileSystem *fs, char *path): inode_t
 fs_rmdir(FileSystem *fs, inode_t dir): bool
 fs_unlink(FileSystem *fs, inode_t file): bool
 fs_read(FileSystem *fs, size_t inode_number, uint8_t *data, size_t length, size_t offset): ssize_t 
 fs_write(FileSystem *fs, size_t inode_number, uint8_t *data, size_t length, size_t offset): ssize_t
 fs_rename(char* oldpath, char* newpath): ssize_t
 fs_truncate(FileSystem *fs, inode_t file, size_t newsize): bool
 fs_readdir(FileSystem *fs, inode_t dir): inode_t*
 fs_getpath(FileSystem *fs, inode_t inode): char[FS_MAX_PATH_LENGTH]
 fs_getinfo(FileSystem *fs, inode_t inode): InodeInfo
 fs_format(Disk *disk, bool quick_format): bool
 fs_mount(FileSystem *fs, Disk *disk): bool
 fs_unmount(FileSystem *fs): bool
}

class "Disk Emulator" as DE << (H, lightblue) >> { 
 disk_create(const char *path, size_t sectors): int
 disk_open(Disk *disk, const char *path): int
 disk_close(Disk *disk): int
 disk_read_sector(Disk *disk, uint8_t data[SECTOR_SIZE], size_t sector): int
 disk_write_sector(Disk *disk, uint8_t data[SECTOR_SIZE], size_t sector): int
 disk_read_raw(Disk *disk, uint8_t *data, size_t count, size_t offset): int
 disk_write_raw(Disk *disk, uint8_t *data, size_t count, size_t offset): int
}

package Disk <<Database>> {
 object image
}

S -up-> Commands : ref

S -> K
Commands -> K

K -> FS

FS -> DE 

DE -> image

@enduml

PlantUML version 1.2022.7(Mon Aug 22 19:01:30 CEST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: FR
--></g></svg>